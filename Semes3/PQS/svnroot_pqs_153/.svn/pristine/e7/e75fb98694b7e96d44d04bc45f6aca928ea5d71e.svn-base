package edu.nyu.cs.pqs.ps4;

import javax.swing.*;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.color.*;
import java.awt.GridLayout;

/**
 * @author Keeyon
 * Java Connect 4 Gui
 */
public class Connect4Gui implements ConnectFourPlayer {

  private final String name;
  private final int totalRows;
  private final int totalColumns;
  private Color playerOneColor;
  private Color playerTwoColor;
  private String gameName;
  private JFrame frame;
  private JPanel panel;
  private GridLayout myGrid;
  
  /** Private Constructor. Made with Builder
   * @param builder
   */
  private Connect4Gui(GuiBuilder builder) {
    gameName = builder.gameName;
    name = builder.name;
    playerOneColor = builder.playerOneColor;
    playerTwoColor = builder.playerTwoColor;
    totalRows = 6;
    totalColumns = 7;
    
    if (gameName.isEmpty()) {
      gameName = "Connect 4 Game";
    }
    
    drawGui();
  }
  
  /**
   *  Draws the GUI
   * 
   */
  private void drawGui() {
    frame = new JFrame(gameName);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    myGrid = new GridLayout(7,7);
    panel = new JPanel();
    panel.setLayout(myGrid);
    
    addInitialEmptyCircles();
    
    frame.setContentPane(panel);
    frame.setPreferredSize(new Dimension(1000,400));
    frame.pack();
    frame.setVisible(true);
  }
  
  /**
   * This creates our initial grid with empty circles
   */
  private void addInitialEmptyCircles() {
    for (int row = 0; row < totalRows; row++) {
      for (int column = 0; column < totalColumns; column++) {
        panel.add(new CirclePanel());
      }
    }
  }
  
  /** Draw 
   * @param row
   * @param column
   * @param color
   */
  private void drawCircleAtPosition(int row, int column, Color color) {
    int location = getIndexFromPoint(row, column);
    CirclePanel newColoredCircle = (CirclePanel) panel.getComponent(location);
    newColoredCircle.setColor(color);
    panel.add(newColoredCircle, location);
  }
  
  /** This is how we will convert point received by server to 
   * Place to Draw in GUI
   * @param row
   * @param column
   * @return
   */
  private int getIndexFromPoint(int row, int column) {
    return (row * totalColumns + column);
  }
  
  @Override
  public void PlayerHasWon(String playerName, BoardSpace winningPlayer) {
  }

  @Override
  public void PlayerHasMadeMove(String playerName, BoardSpace playerMadeMove,
      int column) {
  }

  @Override
  public void PlayerTurnToMakeMove(String playerName, BoardSpace playersTurn) {
  }
  
  /**
   * @author Keeyon
   * Builder for the Connect4 Game
   * Optional Params for colors for 
   * Each Player. Also for The Label of the Game
   */
  public static class GuiBuilder {
    // Required Variables
    private final String name;
    
    // Optional Variables
    private Color playerOneColor;
    private Color playerTwoColor;
    private String gameName = "";
    
    /** Construction with required parameter of Name
     * @param name
     */
    public GuiBuilder(String name) {
      this.name = name;
    }
    
    /** Building optional Player 1 Color
     * @param color1
     * @return GuiBuilder
     */
    public GuiBuilder playerOneColor(Color color1) {
      playerOneColor = color1;
      return this;
    }
    
    /** Building optional player 2 color
     * @param color2
     * @return GuiBuilder
     */
    public GuiBuilder playerTwoColor(Color color2) {
      playerTwoColor = color2;
      return this;
    }
    
    /** Building optional name of game
     * @param gameName
     * @return GuiBuilder
     */
    public GuiBuilder gameName(String gameName) {
      this.gameName = gameName;
      return this;
    }
    
    /** This will build and return the Connect4Gui
     * @return new Connect4 Gui
     */
    public Connect4Gui build() {
      return new Connect4Gui(this);
    }
  }
}
