{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"my",
				"my-car"
			],
			[
				"Scheme",
				"SchemeClass2"
			],
			[
				"neste",
				"nested-length"
			],
			[
				"Print",
				"PrintsWithNewLines"
			],
			[
				"Pri",
				"PrintsWithNewLines"
			],
			[
				"net",
				"nestedListsLength"
			],
			[
				"nested",
				"nestedListsLength"
			],
			[
				"li",
				"List"
			],
			[
				"mid",
				"midpointIndex"
			],
			[
				"mi",
				"midpointIndex"
			],
			[
				"in",
				"Integer"
			],
			[
				"In",
				"Integer"
			],
			[
				"Quick",
				"QuicksortTask"
			],
			[
				"Re",
				"Recursive"
			],
			[
				"Numb",
				"Numbers"
			],
			[
				"Num",
				"NumberArray"
			],
			[
				"Sort",
				"sortTask"
			],
			[
				"sor",
				"sortTask"
			],
			[
				"sort",
				"sortTask2"
			],
			[
				"so",
				"sort"
			],
			[
				"sortTa",
				"sortTask1"
			],
			[
				"Sor",
				"sortTask"
			],
			[
				"Quicksort",
				"QuicksortPackage"
			],
			[
				"Quic",
				"QuicksortPackage"
			],
			[
				"Int",
				"Int_Array"
			],
			[
				"Pr",
				"Printed"
			],
			[
				"noti",
				"notifyAddTask"
			],
			[
				"notify",
				"notifyPrinterTask"
			],
			[
				"no",
				"notifyPrinter"
			],
			[
				"Number",
				"NumberArray"
			],
			[
				"Sum",
				"Sum"
			],
			[
				"print",
				"printTask"
			],
			[
				"be",
				"begin"
			],
			[
				"Nu",
				"NumberArray"
			],
			[
				"put",
				"Put_Line"
			],
			[
				"pro",
				"procedure"
			],
			[
				"is",
				"isprime"
			],
			[
				"happy",
				"happy"
			],
			[
				"sad",
				"sad"
			],
			[
				"kcik",
				"KICKASS"
			],
			[
				"classify",
				"classifyString"
			],
			[
				"hap",
				"happyChance"
			],
			[
				"show",
				"showProbability"
			],
			[
				"prob",
				"prob_dist"
			],
			[
				"any",
				"anything"
			],
			[
				"don",
				"dont"
			],
			[
				"test",
				"testingString"
			],
			[
				"wonder",
				"wonderful"
			],
			[
				"pos",
				"posfeats"
			],
			[
				"clas",
				"classify"
			],
			[
				"neg",
				"negfeats"
			],
			[
				"cate",
				"categories"
			],
			[
				"set",
				"setSent3"
			],
			[
				"Sent",
				"sent3ArraySplit"
			],
			[
				"ran",
				"range"
			],
			[
				"inde",
				"indexj"
			],
			[
				"pus",
				"pushToIndex"
			],
			[
				"replace",
				"replaceInitial"
			],
			[
				"push",
				"push_list_elements"
			],
			[
				"i",
				"i"
			],
			[
				"pr",
				"practicemodules"
			],
			[
				"ARGU",
				"argument"
			],
			[
				"arg",
				"arg"
			],
			[
				"Tw",
				"TwoArgumentsAddition"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"ar",
				"arg"
			],
			[
				"Set",
				"SetGlobal"
			],
			[
				"Add",
				"Add1NumNormal"
			],
			[
				"main",
				"mainWindow"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "                            ;;;Mini-Scheme Interpreter\n\n\n;;; Your first task is to understand this. \n\n(define (repl)     ;;; the read-eval-print loop.\n  (display \"--> \") \n  (let ((exp (read)))\n    (cond ((equal? exp '(exit))      ; (exit) only allowed at top level\n       'done)\n      (else  (display (top-eval exp))\n         (newline)\n         (repl))\n      )))\n\n\n(define (my-load filename)       ;; don't want to redefine the Scheme LOAD\n  (load-repl (open-input-file filename)))\n\n\n(define (load-repl port)\n  (let ((exp (read port)))\n    (cond ((eof-object? exp) 'done)\n      (else (let ((res (top-eval exp)))\n          (display res)\n          (load-repl port)))\n      )))\n\n\n\n;; insert!, below, is a destructive update of a list L, inserting the\n;; parameter val onto the front of L (so that L is actually modified).\n;; insert! must only be used where absolutely necessary, e.g. when an\n;; environment must be destructively updated to allow for recursion\n;; (see the implementation of (define ...) below).\n\n;; As their names imply, set-car! and set-cdr! destructively modify \n;; the car field and cdr field of a cons cell, respectively. They are\n;; built-in functions (see *global-env* below).\n\n(define (insert! val L)\n  (set-cdr! L (cons (car L) (cdr L)))\n  (set-car! L val)\n  )\n\n\n;; (define ....) is only allowed at the top level and affects only the \n;; global environment. Only the basic form of define is supported here.\n\n(define (top-eval exp)\n  (cond ((not (pair? exp)) (my-eval exp *global-env*))\n    ((eq? (car exp) 'define)   \n     (insert! (list (cadr exp) (my-eval (caddr exp) *global-env*)) *global-env*)\n     (cadr exp)) ; just return the symbol being defined\n    (else (my-eval exp *global-env*))\n    ))\n\n\n(define (lookup var env)\n  (let ((item (assoc var env)))  ;; assoc returns #f if var not found in env\n    (cond ((not item) (display \"Error: Undefined Symbol \")\n              (display var) (newline))\n      (else (cadr item))\n      )))\n\n(define (handle-if test then-exp else-exp env)\n  (if (my-eval test env)\n      (my-eval then-exp env)\n      (my-eval else-exp env)))\n\n\n;; still missing let, let*, letrec, the syntax for (define (f x) ...),\n;; cond, begin (block).\n\n(define (my-eval exp env)\n  (cond\n   ((symbol? exp) (lookup exp env))\n   ((not (pair? exp)) exp)\n   ((eq? (car exp) 'quote) (cadr exp))\n   ((eq? (car exp) 'if)\n    (handle-if (cadr exp) (caddr exp) (cadddr exp) env))\n   ((eq? (car exp) 'lambda)\n    (list 'closure exp env))\n   ((eq? (car exp) 'letrec)\n    (handle-letrec (cadr exp) (cddr exp) env))  ;; see explanation below\n   (else\n    (handle-call (map (lambda (sub-exp) (my-eval sub-exp env)) exp)))\n   ))\n\n\n(define (bind formals actuals)\n  (cond ((null? formals) '())\n    (else (cons (list (car formals) (car actuals))\n            (bind (cdr formals) (cdr actuals))))\n    ))\n\n(define (handle-block block env)\n  (cond ((null? block) (display \"Error: Can't have empty block or body\"))\n    ((null? (cdr block)) (my-eval (car block) env))\n    (else (my-eval (car block) env)\n          (handle-block (cdr block) env))\n    ))\n    \n\n; Here's how handle-letrec should implement LETREC\n; 0) The parameters are the defs,(e.g. ((f exp1) (g exp2)), and the body,\n;    which is a list of expressions, e.g. ((display x) (f (g 1)))\n; 1) create an association list binding the new names introducted by\n;    the letrec to uninitialized values (e.g. the symbol '*uninitialized*).\n;    For example, if the new names are x and y, then create \n;    ((x *uninitialized*) (y *uninitialized*))\n; 2) create a new-env by appending the above association list to env.\n; 3) eval the right hand side of each def using new-env\n; 4) destructively modify new-env to replace the unitialized value for each\n;    new name with its correspondinng value.\n; 5) evaluate the body of the letrec using new-env\n\n\n(define (handle-letrec defs body env)\n  (display \"Error: letrec not implemented yet\") \n  (newline))\n\n\n(define (handle-call evald-exps)\n  (let ((fn (car evald-exps))\n    (args (cdr evald-exps)))\n   (cond\n    ((eq? (car fn) 'closure)\n     (let ((formals (cadr (cadr fn)))\n       (body (cddr (cadr fn)))\n       (env (caddr fn)))\n       (handle-block body (append (bind formals args) env))))\n    ((eq? (car fn) 'primitive-function)\n     (apply (cadr fn) args))\n    (else (display \"Error: Calling non-function\"))\n    )))\n\n\n\n\n;;-------------------- Here is the initial global environment --------\n\n(define *global-env*\n  (list (list 'car (list 'primitive-function car))\n    (list 'cdr (list 'primitive-function cdr))\n    (list 'set-car! (list 'primitive-function set-car!))\n    (list 'set-cdr! (list 'primitive-function set-cdr!))\n    (list 'cons (list 'primitive-function cons))\n    (list 'list (list 'primitive-function list))\n    (list '+ (list 'primitive-function +))\n    (list '- (list 'primitive-function -))\n    (list '* (list 'primitive-function *))\n    (list '= (list 'primitive-function =))\n    (list '< (list 'primitive-function <))\n    (list '> (list 'primitive-function >))\n    (list '<= (list 'primitive-function  <=))\n    (list '>= (list 'primitive-function >=))\n    (list 'eq? (list 'primitive-function eq?))\n    (list 'pair? (list 'primitive-function pair?))\n    (list 'symbol? (list 'primitive-function symbol?))\n    (list 'null? (list 'primitive-function null?))\n    (list 'read (list 'primitive-function read))\n    (list 'display (list 'primitive-function  display))\n    (list 'open-input-file (list 'primitive-function open-input-file))\n    (list 'close-input-port (list 'primitive-function close-input-port))\n    (list 'eof-object? (list 'primitive-function eof-object?))\n    (list 'load (list 'primitive-function my-load))  ;;defined above\n    ))",
			"file": "interpreter.scm",
			"file_size": 5675,
			"file_write_time": 130585682670000000,
			"settings":
			{
				"buffer_size": 5677,
				"line_ending": "Unix",
				"name": ";;;Mini-Scheme Interpr"
			}
		},
		{
			"file": "testingScheme.scm",
			"settings":
			{
				"buffer_size": 65,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Scheme/Scheme.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"synt",
				"Set Syntax: Scheme"
			],
			[
				"synta",
				"Set Syntax: Scheme"
			],
			[
				"acheme",
				"Set Syntax: Scheme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"cheme",
				"Set Syntax: Scheme"
			],
			[
				"schem",
				"Set Syntax: Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ada",
				"Set Syntax: Ada"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"java",
				"Set Syntax: Java"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"Install",
				"Package Control: Install Package"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"Package ins",
				"Package Control: Install Package"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"pyth",
				"Set Syntax: Python"
			],
			[
				"pytho",
				"Set Syntax: Python"
			],
			[
				"",
				"Package Control: List Packages"
			],
			[
				"PACKAGE",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"pip install pep8",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment2/Programming/test.scm",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment2/Programming/SchemeClass2.scm",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment2/Programming/*REPL* [scheme].lisp",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/Assign1/QuicksortPackage.adb",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/gui/runtime_display_panel.py",
		"/Users/Keeyon/Coding/Sublime Files/Sublime Projects/Example1Project.sublime-project",
		"/Users/Keeyon/Coding/Project-Euler/Python/Euler.sublime-project",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/source_parser_unittest.py",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test2/stack.adb",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test3/README.txt",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test3/QuicksortPackage.adb",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test3/QuicksortPackage.ads",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test2/main.adb",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test/printingprogram.ads",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test/printingprogram.adb",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test3/numbers.txt",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/printingprogram.ads",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/printingprogram.adb",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/test2/stack.ads",
		"/Users/Keeyon/School/Semes1/ProgLang/Assignment1/hello.adb",
		"/Users/Keeyon/Coding/Project-Euler/Python/LargetPrimeFactorP3.py",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/source_parser.py",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/Assignments.py",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/gui/argparse_test_data.py",
		"/Users/Keeyon/Coding/PythonPractice/test/test_two_arg.py",
		"/Users/Keeyon/Coding/Hacks/Unhackathon/nltkExample.py",
		"/Users/Keeyon/test.py",
		"/Users/Keeyon/Coding/Hacks/Unhackathon/StartWorking.py",
		"/Users/Keeyon/Coding/Hacks/Unhackathon/Test/Classification.py",
		"/Users/Keeyon/Coding/Hacks/Unhackathon/textblob.py",
		"/Users/Keeyon/Desktop/Hack.py",
		"/Users/Keeyon/Desktop/Unhackathon/Hack.py",
		"/Users/Keeyon/Coding/PythonPractice/test/test_sorts.py",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/sorts.py",
		"/Users/Keeyon/Coding/Hacks/Unhackathon/nltkpractice.py",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/pythoncolors.py",
		"/Users/Keeyon/Coding/Sublime Files/Testing Random/Prints",
		"/Users/Keeyon/Desktop/JavaTest.java",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/languages/english.json",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/twoargprog.py",
		"/Users/Keeyon/Coding/PythonPractice/test/test_me.py",
		"/Users/Keeyon/Coding/PythonPractice/test/random.py",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/run_tests.py",
		"/Users/Keeyon/Coding/PythonPractice/Assignments.py",
		"/Users/Keeyon/Coding/PythonPractice/test/all_tests.py",
		"/Users/Keeyon/Coding/PythonPractice/__init__.py",
		"/Users/Keeyon/Coding/PythonPractice/Functions.py",
		"/Users/Keeyon/Coding/PythonPractice/TwoArgumentTests.py",
		"/Users/Keeyon/Coding/PythonPractice/practicemodules/TwoArgumentTests.py",
		"/Users/Keeyon/Coding/PythonPractice/TwoArgumentProgram.py",
		"/Users/Keeyon/Coding/PythonPractice/test.py",
		"/Users/Keeyon/Coding/General Files/pre-commit.py",
		"/Users/Keeyon/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/Keeyon/Coding/PythonPractice/Numbers.py",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/gooey/gooey_decorator.py",
		"/Users/Keeyon/Coding/PythonPractice/Gooey/LICENSE.txt",
		"/Users/Keeyon/Coding/PythonPractice/printStuff.py",
		"/Users/Keeyon/Coding/Sublime Files/Testing Random/SampleCode.py",
		"/Users/Keeyon/Coding/Sublime Files/Sublime Projects/PythonPracticeBook.sublime-project",
		"/Users/Keeyon/Coding/Sublime Files/Testing Random/PrintStatements.py",
		"/Users/Keeyon/Coding/Sublime Files/Testing Random/Initial.py",
		"/Users/Keeyon/Coding/Sublime Files/Test2.py",
		"/Users/Keeyon/Coding/Sublime Files/What.py",
		"/Users/Keeyon/Coding/Sublime Files/Testing Random/Number2.py",
		"/Users/Keeyon/Coding/Sublime Files/SampleCode.py",
		"/Users/Keeyon/Coding/Sublime Files/TestFile.PY",
		"/Users/Keeyon/Coding/Sublime Files/Initial.py",
		"/Users/Keeyon/Coding/Sublime Files/Number2.py",
		"/Users/Keeyon/Library/Application Support/Sublime Text 3/Packages/User/Hell.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"KeeyonPrint",
			"put",
			"sortTask",
			"tempintarray",
			"NumberArray",
			"sort",
			"adder",
			"put",
			"swap",
			"i",
			"two_arguemnts_addition",
			"string",
			"two_arguemnts_addition",
			"TwoArgumentsAddition",
			"TwoArgumentsAdditionInitial",
			"args",
			"sys",
			"sys.argv[1:]",
			"SetNormal",
			"root",
			"ttk",
			"?`",
			"This",
			"Initial",
			"asdf",
			"asdf  adsfaf\n\n\nadsfasdl;k"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Ttkk"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "interpreter.scm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5677,
						"regions":
						{
						},
						"selection":
						[
							[
								1258,
								1223
							]
						],
						"settings":
						{
							"auto_name": ";;;Mini-Scheme Interpr",
							"syntax": "Packages/Scheme/Scheme.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 289.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "testingScheme.scm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65,
						"regions":
						{
						},
						"selection":
						[
							[
								65,
								65
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 191.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "SchemeInterpreter.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"repl",
				"*REPL* [scheme]"
			],
			[
				"python",
				"Sublime Projects/PythonPracticeBook.sublime-project"
			],
			[
				"ini",
				"Testing Random/Initial.py"
			],
			[
				"",
				"Testing Random/Number2.py"
			],
			[
				"prin",
				"Testing Random/Prints"
			],
			[
				"initia",
				"Testing Random/Initial.py"
			],
			[
				"py",
				"~/Coding/Sublime Files/Number2.py"
			],
			[
				"in",
				"~/Coding/Sublime Files/Number2.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Coding/Project-Euler/Python/Euler.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 47.0,
		"selected_items":
		[
			[
				"python",
				"convert_to_python"
			]
		],
		"width": 593.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
